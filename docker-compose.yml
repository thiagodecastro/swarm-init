version: '3.3'

services:
  portainer-agent:
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent-network
    deploy:
      mode: global
      

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainer-data:/data
    networks:
      - agent-network
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.portainer.portainer-data == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.constraint-label=traefik-net
        - traefik.http.routers.portainer-http.rule=Host(`portainer.${DOMAIN_NAME}`)
        - traefik.http.routers.portainer-http.entrypoints=http
        #- traefik.http.routers.portainer-http.middlewares=https-redirect
        #- traefik.http.routers.portainer-https.rule=Host(`${DOMAIN?Variable not set}`)
        #- traefik.http.routers.portainer-https.entrypoints=https
        #- traefik.http.routers.portainer-https.tls=true
        #- traefik.http.routers.portainer-https.tls.certresolver=le
        - traefik.http.services.portainer.loadbalancer.server.port=9000
  swarmpit:
    image: swarmpit/swarmpit:latest
    environment:
      - SWARMPIT_DB=http://db:5984
      - SWARMPIT_INFLUXDB=http://influxdb:8086
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - net
      - traefik-net
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.constraint-label=traefik-net
        - traefik.http.routers.swarmpit-http.rule=Host(`swarmpit.${DOMAIN_NAME}`)
        - traefik.http.routers.swarmpit-http.entrypoints=http
       # - traefik.http.routers.swarmpit-http.middlewares=https-redirect
       # - traefik.http.routers.swarmpit-https.rule=Host(`${DOMAIN?Variable not set}`)
       # - traefik.http.routers.swarmpit-https.entrypoints=https
       # - traefik.http.routers.swarmpit-https.tls=true
       # - traefik.http.routers.swarmpit-https.tls.certresolver=le
        - traefik.http.services.swarmpit.loadbalancer.server.port=8080

  db:
    image: couchdb:2.3.0
    volumes:
      - db-data:/opt/couchdb/data
    networks:
      - net
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.15'
          memory: 256M
      placement:
        constraints:
          - node.labels.swarmpit.db-data == true
  influxdb:
    image: influxdb:1.7
    volumes:
      - influx-data:/var/lib/influxdb
    networks:
      - net
    deploy:
      resources:
        reservations:
          cpus: '0.3'
          memory: 128M
        limits:
          cpus: '0.6'
          memory: 512M
      placement:
        constraints:
          - node.labels.swarmpit.influx-data == true
  agent-swarmpit:
    image: swarmpit/agent:latest
    environment:
      - DOCKER_API_VERSION=1.35
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - net
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.10'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
  traefik:
    # Use the latest v2.2.x Traefik image available
    image: traefik:v2.2
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      # Listen on port 443, default for HTTPS
      - 443:443
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
         # - node.labels.traefik-net.traefik-net-certificates == true
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-net network (declared below)
        - traefik.docker.network=traefik-net
        # Use the custom label "traefik.constraint-label=traefik-net"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-net
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        #- traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        #- traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        #- traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-net-http.rule=Host(`traefik.${DOMAIN_NAME}`)
        - traefik.http.routers.traefik-net-http.entrypoints=http
        #- traefik.http.routers.traefik-net-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        #- traefik.http.routers.traefik-net-https.rule=Host(`${DOMAIN?Variable not set}`)
        #- traefik.http.routers.traefik-net-https.entrypoints=https
        #- traefik.http.routers.traefik-net-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-net-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        #- traefik.http.routers.traefik-net-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        #- traefik.http.routers.traefik-net-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-net.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      #- traefik-net-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-net"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-net`)
      # Do not expose all Docker services, only the ones explicitly exposed
      #- --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      #- --certificatesresolvers.le.acme.email=${EMAIL?Variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      #- --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      #- --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-net

volumes:
  portainer-data:
  db-data:
    driver: local
  influx-data:
    driver: local
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  #traefik-net-certificates:

networks:
  # Use the previously created public network "traefik-net", shared with other
  # services that need to be publicly available via this Traefik
  agent-network:
    attachable: true
  net:
    driver: overlay
    attachable: true
  traefik-net:
    external: true
